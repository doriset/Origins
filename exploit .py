import itertools

# Генерация всех перестановок строк и столбцов
def generate_permutations(n):
    return list(itertools.permutations(range(n)))

# Функция для дешифрования с использованием ключей перестановки
def decrypt_double_transposition(ciphertext, row_perm, col_perm, rows=3, cols=9):
    matrix = [['' for _ in range(cols)] for _ in range(rows)]
    
    index = 0
    for i in row_perm:
        for j in col_perm:
            if index < len(ciphertext):
                matrix[i][j] = ciphertext[index]
                index += 1
    
    decrypted_text = ''.join([''.join(row) for row in matrix])
    return decrypted_text

# Пример зашифрованного текста
ciphertext = "someencryptedtext"

# Генерация всех перестановок для строки и столбца
row_permutations = generate_permutations(3)
col_permutations = generate_permutations(9)

# Перебор всех комбинаций перестановок
for row_perm in row_permutations:
    for col_perm in col_permutations:
        decrypted_text = decrypt_double_transposition(ciphertext, row_perm, col_perm)
        # Предположим, что исходный текст на английском, и мы знаем, как он выглядит
        # Для проверки можем использовать некоторые эвристики или частотный анализ
        print(f"Row permutation: {row_perm}, Column permutation: {col_perm}, Decrypted text: {decrypted_text}")